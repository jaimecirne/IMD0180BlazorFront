@page "/"

@inject IJSRuntime jsr
@inject HttpClient Http
@inject NavigationManager NavManager

@using System.Text.Json
@using IMD0180BlazorFront.Model
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@using System.Net.Http.Headers

@*<EditForm Model="@user" OnSubmit="Login">
    <InputText id="ID" @bind-Value="user.Login" />
    <InputText id="ChaveAcesso" @bind-Value="user.Password" />
    <button type="submit">Enviar</button>
</EditForm>*@

@if (token == null)
{
    <EditForm Model="@user" OnValidSubmit="Login">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-8">
                <div class="form-group">
                    <label for="Login" class="control-label">Login</label>
                    <InputText @bind-Value="@user.Login" class="form-control" />
                    <ValidationMessage For="@(()=> user.Login)" />
                </div>
                <div class="form-group">
                    <label for="Password" class="control-label">Password</label>
                    <InputText @bind-Value="@user.Password" class="form-control" />
                    <ValidationMessage For="@(()=> user.Password)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" value="Enviar" />
                </div>
            </div>
        </div>
    </EditForm>
} else 
{
    <a href="javascript:;" @onclick="TesteConsulta">Testar GET and logout</a>
}

@code {
    private User user = new User();
    string token;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            token = await jsr.InvokeAsync<string>("localStorage.getItem", "token").ConfigureAwait(false);
        }
        catch (Exception ex)
        { 
        }
    }

    private async Task TesteConsulta()
    {
        try
        {
            token = await jsr.InvokeAsync<string>("localStorage.getItem", "token").ConfigureAwait(false);

            var requestMsg = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44317/User");
            requestMsg.Headers.Add("Authorization", "Bearer " + token);
            var response = await Http.SendAsync(requestMsg);

            if (!response.IsSuccessStatusCode)
            {
                await jsr.InvokeVoidAsync("localStorage.removeItem", "token").ConfigureAwait(false);
                token = null;
                await jsr.InvokeVoidAsync("alert", "Sem autorização!");
            }
            else
            {
                await jsr.InvokeVoidAsync("alert", "Acesso Autorizado! logout" + response.Content.ToString());
                token = null;
                await jsr.InvokeVoidAsync("localStorage.removeItem", "token").ConfigureAwait(false);
                NavManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {

        }
    }


    private async Task Login()
    {
        HttpContent httpContent = new StringContent(JsonSerializer.Serialize(user), Encoding.UTF8);
        httpContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
        HttpResponseMessage response = await new HttpClient().PostAsync("https://localhost:44317/Auth", httpContent);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            LoginResult result = JsonSerializer.Deserialize<LoginResult>(content);
            await jsr.InvokeVoidAsync("localStorage.setItem", "token",result.accessToken).ConfigureAwait(false);
            await jsr.InvokeVoidAsync("alert", user.Login + " logado");
            NavManager.NavigateTo("/Users");
        }


    }
}